generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// ========================
// Main User Table
// ========================
model User {
  id               String     @id @default(uuid()) @db.Uuid       // Unique identifier
  supabaseId       String     @db.Uuid @unique                    // Supabase auth UID
  email            String     @unique                             // Email address
  passwordHash     String?                                        // Hashed password
  userType         UserType                                       // User role
  status           UserStatus @default(pending_verification)      // Verification status
  firstName        String?                                        // First name
  lastName         String?                                        // Last name
  companyName      String?                                        // Business company name
  phone            String?                                        // Phone number
  country          String?                                        // Country
  emailVerified    Boolean    @default(false)                     // Email verified?
  profileComplete  Boolean    @default(false)                     // Profile completed?
  verificationData Json?                                          // Flexible verification data
  lastLogin        DateTime?                                      // Last login timestamp
  createdAt        DateTime   @default(now())                     // Creation time
  updatedAt        DateTime   @updatedAt                          // Last update time

  // Relations
  adminProfile     AdminProfile? @relation("AdminProfileUser")
  sellerProfile    SellerProfile?
  buyerProfile     BuyerProfile?
  
  // Admin relations
  createdAdminProfiles AdminProfile[] @relation("AdminProfileCreator")

  @@map("users")
}

// ========================
// Admin Profile
// ========================
model AdminProfile {
  userId      String   @id @map("user_id") @db.Uuid               // FK to users.id
  fullName    String?  @map("full_name")                          // Display name
  permissions String[] @default([])                               // Array of permissions
  createdBy   String?  @map("created_by") @db.Uuid                // Creator admin
  isActive    Boolean  @default(true) @map("is_active")           // Active admin?
  adminNotes  String?  @map("admin_notes")                        // Notes
  createdAt   DateTime @default(now()) @map("created_at")         // Creation time
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at") // Last update

  // Relations
  user      User  @relation("AdminProfileUser", fields: [userId], references: [id], onDelete: Cascade)
  creator   User? @relation("AdminProfileCreator", fields: [createdBy], references: [id], onDelete: SetNull)

  @@map("admin_profiles")
}

// ========================
// Seller Profile
// ========================
model SellerProfile {
  userId            String   @id @map("user_id") @db.Uuid         // FK to users.id
  verified          Boolean  @default(false)                      // Verified by admin?
  verifiedBy        String?  @map("verified_by") @db.Uuid         // Admin ID
  verificationNotes String?  @map("verification_notes")           // Notes
  createdAt         DateTime @default(now()) @map("created_at")   // Creation time
  updatedAt         DateTime @default(now()) @updatedAt @map("updated_at") // Last update

  // Flexible JSON fields
  businessInfo      Json?    @map("business_info")                // Dynamic business details
  certifications    Json?    @map("certifications")               // Certifications
  verificationDocs  Json?    @map("verification_documents")       // Document metadata
  customFields      Json?    @map("custom_fields")                // Custom client fields

  // Relation
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("seller_profiles")
}

// ========================
// Buyer Profile
// ========================
model BuyerProfile {
  userId            String   @id @map("user_id") @db.Uuid         // FK to users.id
  verified          Boolean  @default(false)                      // Verified by admin?
  verifiedBy        String?  @map("verified_by") @db.Uuid         // Admin ID
  verificationNotes String?  @map("verification_notes")           // Notes
  createdAt         DateTime @default(now()) @map("created_at")   // Creation time
  updatedAt         DateTime @default(now()) @updatedAt @map("updated_at") // Last update

  // Flexible JSON fields
  procurementInfo   Json?    @map("procurement_info")             // Procurement details
  approvalWorkflow  Json?    @map("approval_workflow")            // Approval workflows
  preferredSuppliers Json?   @map("preferred_suppliers")          // Supplier info
  customFields      Json?    @map("custom_fields")                // Custom client fields

  // Relation
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("buyer_profiles")
}

// ========================
// Enums
// ========================
enum UserType {
  buyer
  seller
  admin

  @@map("UserType")
}

enum UserStatus {
  pending_verification
  active
  verified
  rejected
  suspended

  @@map("UserStatus")
}
